#!/usr/bin/awk -f

BEGIN {
    doc_constants = ""
    doc_settings = ""
    doc_global = ""
    internal_functions = ""
    is_show_internal = 0
    toc_internals = "# Internal Functions\n"
    toc = "# Functions\n"
    description = ""
    file_description = ""
    was_file_description = 0
    in_function = 0

    if (! style) {
        style = "github"
    }

	###########
	### STYLES
    styles["github", "h1", "from"] = ".*"
    styles["github", "h1", "to"] = "# &"

    styles["github", "h2", "from"] = ".*"
    styles["github", "h2", "to"] = "## &"

    styles["github", "h3", "from"] = ".*"
    styles["github", "h3", "to"] = "### &"

    styles["github", "h4", "from"] = ".*"
    styles["github", "h4", "to"] = "#### &"

    styles["github", "h5", "from"] = ".*"
    styles["github", "h5", "to"] = "#### &"

    styles["github", "code", "from"] = ".*"
    styles["github", "code", "to"] = "```&"

    styles["github", "/code", "to"] = "```"

    styles["github", "const", "from"] = "^(\\S+)(\\s+|$)"
    styles["github", "const", "to"] = "**\\1**: "
    
    styles["github", "global", "from"] = "^(\\S+)\\s+(\\S*)\\s+"
    styles["github", "global", "to"] = "**\\1** (\\2): "
    
    styles["github", "setting", "from"] = "^(\\S+)\\s+(\\S+)\\s*\\[([^\\]]*)]"
    styles["github", "setting", "to"] = "**\\1** (\\2)[default: **\\3**]:"
    
    styles["github", "opt", "from"] = "^(\\S+)\\s+"
    styles["github", "opt", "to"] = "**\\1**: "
    
	styles["github", "argN", "from"] = "^(\\$[0-9]) (\\S+)"
    styles["github", "argN", "to"] = "**\\1** (\\2):"
    
    styles["github", "argNwDefault", "from"] = "^(\\$[0-9]) (\\S+)\\[([^\\]]*)]"
    styles["github", "argNwDefault", "to"] = "**\\1** (\\2)[default: **\\3**]:"

    styles["github", "arg@", "from"] = "^\\$@ (\\S+)"
    styles["github", "arg@", "to"] = "**...** (\\1):"

    styles["github", "li", "from"] = ".*"
    styles["github", "li", "to"] = "* &"

    styles["github", "i", "from"] = ".*"
    styles["github", "i", "to"] = "_&_"

    styles["github", "anchor", "from"] = ".*"
    styles["github", "anchor", "to"] = "[&](#&)"

    styles["github", "exitcode", "from"] = "([\\\\>!]*[0-9]{1,3}) (.*)"
    styles["github", "exitcode", "to"] = "**\\1**: \\2"
	
    styles["github", "alias", "from"] = "(.*)"
    styles["github", "alias", "to"] = "**\\1**"
	
	###########
	### MARKDOWN ESCAPES
	escapes["github", "from"] = "(^_|_$|<|>|*|#|\\[|\\])"
	escapes["github", "to"] = "\\1"
}

function render(type, text) {
	from = styles["github", type, "from"]
	to = styles["github", type, "to"]
	if (type == "const" || type == "global" || type == "setting" || type == "exitcode" || type == "argNwDefault") {
		match(text, from, ary)
		
		if (type != "argNwDefault") {
			# first parameter
			to_escape = gensub("\\\\", "\\\\\\\\\\\\", "g", escapes["github", "to"])
			escaped_str = gensub(escapes["github", "from"], to_escape, "g", ary[1])
			to_escape = gensub("\\\\", "\\\\\\\\\\\\\\\\", "g", escaped_str)
			to = gensub("\\\\1", to_escape, 1, to)
		}
		
		if (type == "setting" || type == "argNwDefault") {
			# third parameter
			to_escape = gensub("\\\\", "\\\\\\\\\\\\", "g", escapes["github", "to"])
			escaped_str = gensub(escapes["github", "from"], to_escape, "g", ary[3])
			to_escape = gensub("\\\\", "\\\\\\\\\\\\\\\\", "g", escaped_str)
			to = gensub("\\\\3", to_escape, 1, to)
		}
	}
	
    return gensub( \
        from,
        to,
        "g",
        text \
    )
}

function reset() {
    has_example = 0
    has_args = 0
    has_opts = 0
    has_exitcode = 0
    has_alias = 0
    has_stdout = 0
    has_stderr = 0
    has_return = 0
}

#########
#
# File directives
# 
/^[[:space:]]*# @show-internal/ {
    is_show_internal = 1
}

/^[[:space:]]*# @file/ {
    sub(/^[[:space:]]*# @file /, "")
    filedoc = render("h1", $0) "\n"
}

/^[[:space:]]*# @brief/ {
    sub(/^[[:space:]]*# @brief /, "")
    filedoc = filedoc "\n" $0
}

/^[[:space:]]*# @global-header/ {
    if (doc_global == "") {
        doc_global = render("h1", "Global Variables") "\n\n"
    }
    sub(/^[[:space:]]*# @global-header /, "")

    doc_global = doc_global render("h2", $0) "\n"
}

/^[[:space:]]*# @global/ {
    if (doc_global == "") {
        doc_global = render("h1", "Global Variables") "\n\n"
    }

    sub(/^[[:space:]]*# @global /, "")

    $0 = render("global", $0)

    doc_global = doc_global render("li", $0) "\n"
}

/^[[:space:]]*# @setting-header/ {
    if (doc_settings == "") {
        doc_settings = render("h1", "Settings") "\n\n"
    }
    sub(/^[[:space:]]*# @setting-header /, "")

    doc_settings = doc_settings render("h2", $0) "\n"
}

/^[[:space:]]*# @setting/ {
    if (doc_settings == "") {
        doc_settings = render("h1", "Settings") "\n\n"
    }

    sub(/^[[:space:]]*# @setting /, "")

    $0 = render("setting", $0)

    doc_settings = doc_settings render("li", $0) "\n"
}

/^[[:space:]]*# @constant-header/ {
    if (doc_constants == "") {
        doc_constants = render("h1", "Constants") "\n\n"
    }
    sub(/^[[:space:]]*# @constant-header /, "")

    doc_constants = doc_constants render("h2", $0) "\n"
}

/^[[:space:]]*# @constant/ {
    if (doc_constants == "") {
        doc_constants = render("h1", "Constants") "\n\n"
    }

    sub(/^[[:space:]]*# @constant /, "")

    $0 = render("const", $0)

    doc_constants = doc_constants render("li", $0) "\n"
}

#########
#
# Function directives
#
/^[[:space:]]*# @internal/ {
    in_function = 1
    is_internal = 1
}

in_example {
    if (! /^[[:space:]]*#[ ]{3}/) {
        in_example = 0

        docblock = docblock "\n" render("/code") "\n"
    } else {
        sub(/^[[:space:]]*#[ ]{3}/, "")

        docblock = docblock "\n" $0
    }
}

/^[[:space:]]*# @example/ {
    in_function = 1
    in_example = 1

    docblock = docblock "\n" render("h3", "Example")
    docblock = docblock "\n\n" render("code", "bash")
}

/^[[:space:]]*# @arg/ {
    in_function = 1
    if (!has_args) {
        has_args = 1

        docblock = docblock "\n" render("h3", "Arguments") "\n\n"
    }

    sub(/^[[:space:]]*# @arg /, "")

    $0 = render("argNwDefault", $0)
    $0 = render("argN", $0)
    $0 = render("arg@", $0)

    docblock = docblock render("li", $0) "\n"
}

/^[[:space:]]*# @opt/ {
    in_function = 1
    if (!has_opts) {
        has_opts = 1

        docblock = docblock "\n" render("h3", "Options") "\n\n"
    }

    sub(/^[[:space:]]*# @opt /, "")

    $0 = render("opt", $0)

    docblock = docblock render("li", $0) "\n"
}

/^[[:space:]]*# @noargs/ {
    in_function = 1
    docblock = docblock "\n" render("i", "Function has no arguments.") "\n"
}

/^[[:space:]]*# @exitcodes/ {
    in_function = 1
    if (!has_exitcode) {
        has_exitcode = 1

        docblock = docblock "\n" render("h3", "Exit codes") "\n\n"
    }

    sub(/^[[:space:]]*# @exitcodes /, "")
	

    docblock = docblock render("li", $0) "\n"
}

/^[[:space:]]*# @exitcode/ {
    in_function = 1
    if (!has_exitcode) {
        has_exitcode = 1

        docblock = docblock "\n" render("h3", "Exit codes") "\n\n"
    }

    sub(/^[[:space:]]*# @exitcode /, "")
    $0 = render("exitcode", $0)
    
    docblock = docblock render("li", $0) "\n"
}

/^[[:space:]]*# @alias/ {
    in_function = 1
    if (!has_alias) {
        has_alias = 1

        docblock = docblock "\n" render("h3", "Aliases") "\n\n"
    }

    sub(/^[[:space:]]*# @alias /, "")
    $0 = render("alias", $0)
    
    docblock = docblock render("li", $0) "\n"
}

/^[[:space:]]*# @return/ {
    in_function = 1
    if (!has_return) {
        has_return = 1

        docblock = docblock "\n" render("h3", "Return with global scalar $__, array $__a or hash $__h") "\n\n"
    }

    sub(/^[[:space:]]*# @return /, "")

    docblock = docblock render("li", $0) "\n"
}

/^[[:space:]]*# @see/ {
    in_function = 1
    sub(/[[:space:]]*# @see /, "")

    $0 = render("anchor", $0)
    $0 = render("li", $0)

    docblock = docblock "\n" render("h4", "See also") "\n\n" $0 "\n"
}

/^[[:space:]]*# @stdout/ {
    in_function = 1
    has_stdout = 1

    sub(/^[[:space:]]*# @stdout /, "")

    docblock = docblock "\n" render("h3", "Output on stdout")
    docblock = docblock "\n\n" render("li", $0) "\n"
}

/^[[:space:]]*# @stderr/ {
    in_function = 1
    has_stderr = 1

    sub(/^[[:space:]]*# @stderr /, "")

    docblock = docblock "\n" render("h3", "Output on stderr")
    docblock = docblock "\n\n" render("li", $0) "\n"
}

/^[ \t]*(function([ \t])+)?([a-zA-Z0-9_:-]+)([ \t]*)(\(([ \t]*)\))?[ \t]*\{/ && docblock != "" {
    in_function = 1
    func_name = gensub(\
        /^[ \t]*(function([ \t])+)?([a-zA-Z0-9_:-]+)[ \t]*\(.*/, \
        "\\3()", \
        "g" \
    )
    url = func_name
    if (style == "github") {
        # https://github.com/jch/html-pipeline/blob/master/lib/html/pipeline/toc_filter.rb#L44-L45
        #vs: added underscore
        url = tolower(url)
        gsub(/[^[:alnum:] _-]/, "", url)
        gsub(/ /, "-", url)
    }
    if (is_internal) {
        is_internal = 0
        internal_functions = internal_functions render("h2", func_name) "\n" docblock "\n"
        toc_internals = toc_internals "* [" func_name "](#" url ")" "\n"
    } else {
        doc = doc render("h2", func_name) "\n" docblock "\n"
        toc = toc "* [" func_name "](#" url ")" "\n"
    }

    docblock = ""
    reset()
}


#########
#
# Common directives
#
function handle_description() {
    # This function is called when @description directive is starting or ending.
    # We have to decide if the previous @description directive (in case of a starting @description directive) or the just ended @description directive
    # is a global description or a function's description.
    # If still a global description was not defined and is starting a new directive or a function directive
    if ((in_description || !in_function) && !was_file_description) {
        # If the description is null, probably is starting the first @description directive, so we still doesn't decide and return
        if (description == "") { return }
        # otherwise we assign the description to the global description comment
        was_file_description = 1
        file_description = render("h1", "Overview") "\n" description
    } else {
        # Ff a global description was already defined, or a description is just ended or is starting a new function directive, then we know
        # the current description is a function description.
        reset()
        docblock = description
    }
    description = ""
}

/^[[:space:]]*# @description/ {
    # started a new description
    # register we are in description setting `in_description`
    in_description = 1
    # and then let `handle_description` if there was a previous description to assign to the file description
    handle_description()
}

in_description {
    if (/^[^[[:space:]]*#]|^[[:space:]]*# @[^d]|^[[:space:]]*[^#]/) {
        if (!match(description, /\n$/)) {
            description = description "\n"
            #docblock = docblock "\n"
        }
        in_description = 0
        handle_description()
    } else {
        sub(/^[[:space:]]*# @description /, "")
        sub(/^[[:space:]]*# /, "")
        sub(/^[[:space:]]*#$/, "")

        description = description "\n" $0
        #docblock = docblock "\n" $0
    }
}

END {
    if (filedoc != "") {
        print filedoc "\n"
    }
    if (file_description != "") {
        print file_description "\n"
    }
    if (doc_constants != "") {
        print doc_constants "\n"
    }
    if (doc_settings != "") {
        print doc_settings "\n"
    }
    if (doc_global != "") {
        print doc_global "\n"
    }
    print toc
    print ""
    print doc
    if (internal_functions != "" && is_show_internal == 1) {
        print "\n" toc_internals "\n\n" internal_functions
    }
}
